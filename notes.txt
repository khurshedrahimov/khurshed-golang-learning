1) %g is 
%g	%e for large exponents, %f otherwise. 
For floating-point values, width sets the minimum width of the field and precision sets the number of places after the decimal, if appropriate, except that for %g/%G precision sets the maximum number of significant digits (trailing zeros are removed). For example, given 12.345 the format %6.3f prints 12.345 while %.3g prints 12.3. The default precision for %e, %f and %#g is 6; for %g it is the smallest number of digits necessary to identify the value uniquely.

2)Many packages have variables (constants). In the Go programming language, exported variable names are a bit different.
If a variable does not start with a capital letter, it is not exported.
So if you'd try
fmt.Println(math.e)
That wouldn't work, because only variables with a capital letter are exported.

3) A return statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

4) They are bitwise shift operators. x << y means x × 2y, while x >> y means x × 2−y or, equivalently, x ÷ 2y. 

5) %t	the word true or false

6)%q	a single-quoted character literal safely escaped with Go syntax.

7)